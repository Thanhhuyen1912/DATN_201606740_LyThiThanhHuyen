@{
    ViewData["Title"] = "Lịch sử mua hàng";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using System.Globalization
@{
    var culture = new CultureInfo("vi-VN");
}
<div style="margin: 10px auto; font-size: 24px; text-align: center;">
    <p>Danh sách đơn hàng</p>
</div>

@using System.Text.Encodings.Web
@using System.Text.Json

@if (TempData["Message"] != null)
{
    var message = TempData["Message"].ToString();
    <script>
        alert(@Html.Raw(JsonSerializer.Serialize(message)));
    </script>
}

<table id="donmuaTable" class="table table-bordered table-sm">
    <thead>
        <tr>
            <th class="tt" style="width: 120px; cursor: pointer;" onclick="sortTable(0)">Ngày tạo</th>
            <th class="tt" style="width: 130px; cursor: pointer;" onclick="sortTable(1)">Trạng thái</th>
            <th class="tt" style="width: 120px; cursor: pointer;" onclick="sortTable(2)">Tổng tiền</th>
            <th class="tt" style="width: 200px; cursor: pointer;" onclick="sortTable(3)">Trạng thái thanh toán</th>
            <th class="tt" style="width: 140px; cursor: pointer;" onclick="sortTable(4)">Người nhận</th>
            <th class="tt" style="width: 140px; cursor: pointer;" onclick="sortTable(5)">SĐT nhận hàng</th>
            <th class="tt" style="width: 120px;"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr style="font-size:15px">
                <td>@item.NgayTao?.ToString("dd/MM/yyyy")</td>
                <td>@item.TrangThaiVanChuyen</td>
                <td>@item.TongTien?.ToString("C0", culture)</td>
                <td>@(item.TrangThaiThanhToan == true ? "Đã thanh toán" : "Chưa thanh toán")</td>
                <td>@item.TenNhanHang</td>
                <td>@item.SDTNhanHang</td>
                <td hidden class="ma-don-hang">@item.MaDonHang</td>
                <td class="mt-1">
                    <div class="d-inline-flex">
                        <a class="tt btn btn-sm me-1" href="/DonHang/XemChiTiet/@item.MaDonHang">
                            <i class="bi bi-list"></i>
                        </a>
                        <a class="tt btn btn-sm me-1" href="javascript:void(0);" onclick="thayDoiDiaChi('@item.MaDonHang', '@item.TrangThaiVanChuyen')">
                            <i class="bi bi-pencil-fill"></i>
                        </a>
                        <form action="/DonHang/huydonhang" method="post" style="display:inline;">
                            <input type="hidden" name="id" value="@item.MaDonHang" />
                            <button type="submit" class="tt btn btn-sm me-1" onclick="return confirm('Bạn có chắc muốn hủy đơn hàng?');">
                                <i class="bi bi-x-lg"></i>
                            </button>
                        </form>
                        @if (!item.TrangThaiThanhToan && item.MaPhuongThucThanhToan == 2)
                        {
                            <a class="tt btn btn-sm me-1" id="btnXacNhan">
                                <i class="bi bi-currency-dollar"></i>
                            </a>
                        }
                    </div>


                </td>
            </tr>
        }
    </tbody>
</table>


<style>
    .tt {
        color: #a75851;
    }

    /* Căn giữa nội dung các ô */
    #donmuaTable th, #donmuaTable td {
        text-align: center;
        vertical-align: middle;
        padding: 7px;
    }

    /* Màu chữ tiêu đề bảng */
    #donmuaTable thead th {
        color: #a75851; /* Màu xanh dương Bootstrap */
        font-weight: bold;
    }


    /* Tuỳ chọn thêm: bo tròn góc nút và padding */

</style>
<!-- Nút phân trang -->
<div id="pagination" class="mt-3 text-center"></div>
<script>

    function thayDoiDiaChi(maDonHang, trangThai) {
        if (trangThai.trim() == 'Chờ xác nhận') {
            window.location.href = '/DonHang/ThayDoiDiaChi/' + maDonHang;
        } else {
            alert('Đơn hàng đã xử lý, không thể thay đổi địa chỉ.');
        }
    }

    document.getElementById("btnXacNhan").addEventListener("click", function (e) {
        e.preventDefault();
        var data = document.querySelector('.ma-don-hang').innerText;
        console.log("mã đơn hàng:  " + data);
        // Gọi đến action để tạo session
        fetch('/DonHang/TaoSessionMaDonHang', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ MaDonHang: data })
        })
        .then(response => {
            if (response.ok) {
                // Chuyển hướng sau khi session được tạo
                window.location.href = '/DonHang/XacNhanThanhToan';
            } else {
                alert("Lỗi khi tạo session.");
            }
        })
        .catch(error => {
            console.error("Lỗi:", error);
        });
    });



    document.addEventListener("DOMContentLoaded", function () {
        const table = document.getElementById("donmuaTable");
        const tbody = table.querySelector("tbody");
        const rows = tbody.querySelectorAll("tr");
        const rowsPerPage = 10;
        const totalPages = Math.ceil(rows.length / rowsPerPage);
        const pagination = document.getElementById("pagination");

        function showPage(page) {
            // Ẩn tất cả các hàng
            rows.forEach((row, index) => {
                row.style.display = "none";
            });

            // Hiển thị hàng thuộc trang hiện tại
            const start = (page - 1) * rowsPerPage;
            const end = start + rowsPerPage;
            for (let i = start; i < end && i < rows.length; i++) {
                rows[i].style.display = "";
            }

            // Tô đậm nút đang được chọn
            const buttons = pagination.querySelectorAll("button");
            buttons.forEach(btn => btn.classList.remove("active"));
            if (buttons[page - 1]) buttons[page - 1].classList.add("active");
        }

        function createPagination() {
            for (let i = 1; i <= totalPages; i++) {
                const btn = document.createElement("button");
                btn.textContent = i;
                btn.className = "btn btn-sm  mx-1";
                   btn.style.color = "#a75851";
                   btn.style.backgroundColor = "#fdb9a4";

                btn.addEventListener("click", function () {
                    showPage(i);
                });
                pagination.appendChild(btn);
            }
        }

        if (rows.length > 0) {
            createPagination();
            showPage(1);
        }
    });

         let sortDirection = {};

    function sortTable(columnIndex) {
        const table = document.getElementById("donmuaTable");
        const tbody = table.tBodies[0];
        const rows = Array.from(tbody.rows);

        // Đảo chiều sắp xếp
        sortDirection[columnIndex] = !sortDirection[columnIndex];

        // Đoán kiểu dữ liệu dựa vào giá trị dòng đầu tiên
        const sampleValue = rows[0]?.cells[columnIndex]?.innerText?.trim() || "";
        const dataType = detectDataType(sampleValue);

        // Cập nhật icon sắp xếp
        updateSortIcons(columnIndex, sortDirection[columnIndex]);

        rows.sort((a, b) => {
            let valA = a.cells[columnIndex].innerText.trim();
            let valB = b.cells[columnIndex].innerText.trim();

            if (dataType === "date") {
                valA = parseDate(valA);
                valB = parseDate(valB);
            } else if (dataType === "currency") {
                valA = parseCurrency(valA);
                valB = parseCurrency(valB);
            } else if (dataType === "number") {
                valA = parseFloat(valA.replace(/[^0-9.-]+/g, '')) || 0;
                valB = parseFloat(valB.replace(/[^0-9.-]+/g, '')) || 0;
            } else {
                valA = valA.toLowerCase();
                valB = valB.toLowerCase();
            }

            if (valA < valB) return sortDirection[columnIndex] ? -1 : 1;
            if (valA > valB) return sortDirection[columnIndex] ? 1 : -1;
            return 0;
        });

        rows.forEach(row => tbody.appendChild(row));
    }

    function detectDataType(value) {
        const datePattern = /^(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})$/;
        const currencyPattern = /^[\d\s.]+[₫đvndVNĐ]*$/i;
        const numberPattern = /^[\d\s,.]+$/;

        if (datePattern.test(value)) return "date";
        if (currencyPattern.test(value)) return "currency"; // phải trước number
        if (numberPattern.test(value)) return "number";
        return "string";
    }

    function parseDate(str) {
        const parts = str.split(/[-\/]/);
        if (parts.length !== 3) return new Date("Invalid");
        const [day, month, year] = parts.map(p => parseInt(p));
        return new Date(year, month - 1, day);
    }

    function parseCurrency(str) {
        // Bỏ dấu chấm và ký hiệu tiền tệ
        return parseFloat(str.replace(/\./g, "").replace(/[^\d]/g, "")) || 0;
    }

    function updateSortIcons(activeIndex, isAsc) {
        const headers = document.querySelectorAll("#donmuaTable thead th");
        headers.forEach((th, index) => {
            const icon = th.querySelector(".sort-icon");
            if (icon) {
                icon.textContent = index === activeIndex ? (isAsc ? "▲" : "▼") : "";
            }
        });
    }

</script>

